---
title: "Performances of the Moving Average Model and the Artificial Neural Network on the Forecast of Stock Market Indices"
output:
  pdf_document:
    fig_caption: yes
author: "Peilin Jing, Jiachen Liu, Yaoyuan Zhang, Rashi Lodhi"
format: pdf
editor: visual
---

# Abstract

This project delves into the theoretical framework of two types of models. It aims to compare and contrast the performances of the moving average model and the artificial neural network on the prediction of stock market indices. We used the data collected from Yahoo Finance with daily frequency for the period from 1 January 2000 to 31 December 2021. By using a rolling window approach, we evaluated ARIMA-SGARCH to reflect the specific time-series characteristics and have better predictive power than the simple ARIMA model and Recurrent Neural Network models. In order to assess the precision and quality of these models in forecasting, we compared their equity lines, their forecasting error metrics and their performance metrics. The main contribution of this research is to show that the hybrid ARIMA SGARCH model outperforms the other models over the long term.

# 1. Introduction

The importance of this topic can be condensed to 4 points:

-   **Interest in the area**: attracted attention of researchers, investors, speculators, and governments
-   **ARIMA hybrid over ARIMA**: financial time series often do not follow ARIMA assumptions
-   **newest ML techniques to improve models**: We use Recurrent Neural Network(RNN) model to determine if it can reflect the specific time series characteristics and predict better.

# 2. Literature Review

# 3. Methodology and Data

## 3.1 Data Analysis

The first step in the process was cleaning the data. Then, we transformed the adjusted price into a daily logarithmic return, which was calculated according to the following formula:

$$
r_t = ln\frac{P_t}{P_{t-1}}
$$ Reasons to choose log returns:

-   can be added across time periods to create cumulative returns
-   easy to convert between log return and simple return
-   log return follows normal distribution

Advantages to log return having normal distribution: - Distribution only dependent on mean and sd of sample - forecast with higher accuracy (log return) - Stock prices cannot be normal distribution

## 3.1.1 Descriptive Satistics - Stock prices

Figure 1 below presents the descriptive statistics of the adjusted closing prices

```{r figs 1, out.width = "250px", fig.cap="\\label{fig:figs}Descriptive Statistics for Prices"}
knitr::include_graphics("images/Descriptive_Statistics.png")
```

As seen in Figure 2 there are a few periods, such as 2008, 2011, 2015, and 2018, that show high volatility of returns. We can expect to build more accurate forecasting models if we are able to mitigate and "smooth" such periods.

```{r figs 2, out.width = "250px", fig.cap="\\label{fig:figs}Prices Plot"}
knitr::include_graphics("images/PricesPlot.png")
```

Stock prices of SP 500 is that it is not normally distributed

## 3.1.2 Descriptive Satistics - Log Returns

Figure 3 presents the descriptive statistics of the adjusted closing prices

```{r figs 3, out.width = "250px", fig.cap="\\label{fig:figs}Descriptive Statistics for Log Returns"}
knitr::include_graphics("images/LogReturnDescriptive.png")
```

We use log returns to build models

## 3.2 Methodology

### 3.2.1 ARIMA (p,d,q)

The ARMA process is the combination of the autoregressive model and moving average \[2\] designed for a stationary time series. Autoregression (AR) describes a stochastic process, and AR(p) can be denoted as shown below: $$
  y_{t} = c + \phi_{1}y_{t - 1} + \phi_{2}y_{t - 2} + \cdots + \phi_{p}y_{t - p} + \varepsilon_{t},
$$

The moving average process of order q is denoted as MA(q) and the created time series contains a mean of q lagged white noise variables shifting along the series. $$
  y_{t} = c + \varepsilon_t + \theta_{1}\varepsilon_{t - 1} + \theta_{2}\varepsilon_{t - 2} + \cdots + \theta_{q}\varepsilon_{t - q},
$$

d is the number of differencing done to the series to achieve stationarity with I (d) so the ARIMA model can be expressed as

$$\text{Expand:}\qquad
  y_t = c + y_{t-1} + \phi_1 y_{t-1}- \phi_1 y_{t-2} + \theta_1\varepsilon_{t-1} + \varepsilon_t
$$

p is the number of autoregressive terms (AR) q is the number of moving average terms (MA)

#### ARCH(p), GARCH(r,s) and Hybrid ARIMA-SGARCH

The `ARCH(p)` model is given:

$$\sigma_t^2 = \omega + \sum_{i=1}^{p}\alpha_{i}u^2_{t-i}$$ - Most volatility models derive from this - Returns have a conditional distribution (here assumed to be normal) ARCH is not a very good model and almost nobody uses it. - The reason is that it needs to use information from many days before $t$ to calculate volatility on day $t$. That is, it needs a lot of lags. - The solution is to write it as an ARMA model. - That is, add one component to the equation, $\beta\sigma_{t-1}$.

The `GARCH(p,q)` model is $$\sigma_t^2 = \omega + \sum_{i=1}^{p}\alpha_{i}u^2_{t-i} + \sum_{j=1}^{q}\beta_{j}\sigma^2_{t-j}$$

Where: $\alpha$ is news. $\beta$ is memory. The size of $(\alpha + \beta)$ determines how quickly the predictability of the process dies out.

This leads us to lastly, ARIMA-SGarch

#### ARIMA SGARCH - Overview

Stock prices can be tremendously volatile during economic growth as well as recessions. When homoskedasticity presumption is violated, it affects the validity or power of statistical tests when using ARIMA models. We consider the SGARCH effect. The error term of the ARIMA model in this process follows SGARCH(1,1) instead of being assumed constant like the ARIMA model.

#### ARIMA SCGARCH - Steps

1)  We conduct a rolling forecast based on an ARIMA-SGARCH model with window size(s) equal to 1000.
2)  The optimized combination of p and q which has the lowest AIC is used to predict return for the next point. At the end, the vector of forecasted values has the length of 3530 elements
3)  We describe and review our implementation of dynamic ARIMA(p,1,q)-SGARCH(1,1) models with GED distribution and window size(s) equal to 1000.
4)  we evaluate the results based on error metrics, performance metrics, and equity curves.

#### Iteration of the forecasting model ARIMA(p,1,q)-SGARCH(1,1)

```{r figs 4, out.width = "250px", fig.cap="\\label{fig:figs}ARIMA iteration"}
knitr::include_graphics("images/ARIMA_iteration.png")
```

#### Flowchart of the forecasting model ARIMA(p,1,q)-SGARCH(1,1).

```{r figs 5, out.width = "250px", fig.cap="\\label{fig:figs}ARIMA_SGARCH methodology"}
knitr::include_graphics("images/ARIMA_SGARCH_methodology.png")
```

Flowchart of the forecasting model ARIMA(p,1,q)-SGARCH(1,1). This flowchart is for models with window size s = 1000.

### 3.2.2 RNN-LSTM Model

#### Recurrent Neural Network(RNN)

A **recurrent neural network** is a class of artificial neural network that uses sequential or time series data \[1\]. Unlike Feedforward Neural Network, RNN allows the output from some nodes to affect subsequent input to the same nodes by using connections between nodes to create cycles. As a result, the hidden layers produce the outputs with the input information and prior "memory" received from previous learning.

#### Unroll RNN

![Rolled RNN and Unrolled RNN \[1\]](images/unroll-RNN.png)

#### Recurrent Neural Network(RNN)

Another distinguish characteristic of RNN is that they share parameters across each layer of the network. Unlike feedforward neural networks having individual weight and bias for each node in one layer, recurrent neural networks share the same weight parameter within each layer. However, these weights are still adjusted during the processes of backpropagation and gradient descent to facilitate reinforcement learning.

In feedforward neural network, backpropagation algorithm was used to calculate the gradient with respect to the weights. Recurrent neural network, on the other side, leverage backpropagation through time (BPTT) algorithm to determine the gradient as BPTT is specific to sequential data.

#### Activation Functions

In neural networks, an activation function determines whether a neuron should be activated and typically maps the input to $[0, 1]$ or $[-1, 1]$. The followings are two of the most commonly used activation functions and will be adopted later:

##### Sigmoid

$$
\sigma(x) = \frac{1}{1 + e^{-x}}
$$

##### Tanh (Hyperbolic tangent)

$$
tanh(x) = \frac{e^{x}-e^{-x}}{e^{x}+e^{-x}}
$$

##### ReLU (Rectified Linear Unit) Activation Function

$$
R(x) = max(0, x)
$$

#### Long Short-term Memory (LSTM)

Long short-term memory network, usually known as LSTM, is a specific RNN architecture first introduced by Sepp Hochreiter and Juergen Schmidhuber as a solution to vanishing gradient problem \[2\]. Recall with an RNN, similar with human reading a book and remembering what happened in the earlier chapter, it remembers the previous information and use it for processing the current input. The shortcoming of the NN is that it is not able to remember long term dependencies due to the vanishing gradient. The LSTM is designed to alleviate and avoid such issues.

The LSTM consists of three parts \[5\]:

-   **Forget Gate**: Choose whether the information coming from the previous time stamp should be remembered or can be forgotten
-   **Input Gate**: Learn new information from the input to this cell
-   **Output Gate**: Passes the updated information tot the next time stamp

#### Forget Gate

In an LSTM cell, the cell first need to decide if the information from previous time stamp should be kept or forgotten. The equation of the forget gate is:

$$
f_t = \sigma(W_f\cdot[x_t, h_{t-1}] + b_f)
$$

Where

-   $x_t = \text{input to the current time stamp}$
-   $h_{t-1} = \text{hidden state of the previous time stamp}$
-   $W_f = \text{weight matrix associated with hidden state}$
-   $b_f = \text{constant}$

After that, a `sigmoid` function is applied over $f_t$ and make it a number between $0$ and $1$. Then $f_t$ is multiplied with the previous cell state. If $f_t=0$, the network will forget everything from the previous time stamp while $f_t=1$ represents that the network will remember everything.

#### Input Gate and new information

Next we decide what new information we will store in the cell state. First, the input gate decides which values we'll update with `sigmoid` activation function:

$$
i_t = \sigma(W_i\cdot[x_t, h_{t-1}] + b_i)
$$

Where

-   $W_t = \text{weight matrix of the input associated with hidden state}$

Next, the new information is sent through a `tanh` layer to create the new candidate values:

$$
\tilde{C_t} = tanh(W_C\cdot[x_t, h_{t-1}] + b_C)
$$

#### New Cell State $C_t$

With previous work, the LSTM cell now updates the new cell state for the current time stamp as:

$$
C_t = f_t * C_{t-1} + i_t * \tilde{C_t}
$$

The current cell state $C_t$ combines how much we decide to remember from the previous cell state $C_{t-1}$ scaled by the forget gate and how much we wish to take in from the new current input $\tilde{C_t}$ scaled by the input gate.

#### Output Gate

Finally, the cell needs to decide what it is going to output and by how much. The filter of the output is the output gate, with the following equation:

$$
o_t = \sigma(W_o\cdot[x_t, h_{t-1}] + b_o)
$$

The equation of the output gate is very similar with the forget gate and the input gate. Then, we push the cell state $C_t$ through the `tanh` activation function to maintain the value staying in between $-1$ and $1$, and multiply it by the output gate:

$$
h_t = o_t * tanh(C_t)
$$

#### Overall Module

The previous steps conclude the architecture of the LSTM. The whole process can be summarized and displayed as the following:

![LSTM Chain \[4\]](images/LSTM-chain.png)

# 4. Results

## 4.1 Model: Arima-SGARCH

```{r message = FALSE, include=FALSE, echo=FALSE}
#Load packages
library(tidyquant)
library(fpp3)
library(rugarch)
library(rmgarch)
library(forecast)
```

```{r message = FALSE, include = FALSE, echo=FALSE}
# Import Data
sp <- getSymbols(Symbols = "^GSPC", from = "2000-01-01", 
                 to = "2021-12-13", src = "yahoo", 
                 adjust=TRUE, auto.assign = FALSE)
sp_prices <- Ad(sp)
head(sp_prices)

```

```{r include = FALSE, echo=FALSE}
#Compute the log returns
returns <- CalculateReturns(sp_prices) %>% na.omit()
data <- returns
```

```{r message = FALSE,include = FALSE, echo=FALSE}
plot(returns)
```

In the paper, it had several different models, including SGARCH, EGARCH and Arima, etc. In the best model Arima-SGARCH, it tested for different window size and ,distribution model, and made the conclusion that hybrid Arima(p,1,q)- SGARCH(1,1) with w=1000 is the best model with best window size and distribution model according to the error metrics. In this section, we used 'rugarch' package to fit the hybrid Arima-GARCH model, compare the hybrid model, and do rolling forecast. so first, we will introduce a little bit about this package.

### 'rugarch' package exploration

-   **ugarchspec()**: Method for creating a univariate GARCH specification object prior to fitting.
-   **ugarchfit()**: Method for fitting a variety of univariate GARCH models.
-   **ugarchroll()**: Method for creating rolling density forecast from ARMA-GARCH models with option for refitting every n periods with parallel functionality.
-   **ugarchboot()**: Method for forecasting the GARCH density based on a bootstrap procedures (see details and references).
-   **ugarchforecast()**:Method for forecasting from a variety of univariate GARCH models.
-   **ugarchfilter()**: Method for filtering a variety of univariate GARCH models.
-   **ugarchpath()**: Method for simulating the path of a GARCH model from a variety of univariate GARCH models.

We used the ugarchspec() to define our model, and ugarchfit() to fit our GARCH model. Then, we used forecasting functions in our project to do volatility forecast, which are ugarchroll() and ugarchforecast().

### Specify model

#### Specify sGarch model

```{r echo = TRUE}
# Specify sGARCH model
spec <- ugarchspec(
    variance.model =
      list(model = "sGARCH",
           garchOrder = c(1,1)),
      mean.model =
      list(armaOrder = c(0,0),
      include.mean = TRUE),
    distribution.model = "ged"
)
```

We choose the best model from the paper and reproduce it first. The best model is hybrid model ARIMA(p,1,q)-SGARCH(1,1) with GED distribution (SGARCH.GED 1000), so we define the model = "sGARCH" and define the distribution model as ged.

```{r include = FALSE, echo = FALSE}
# Fit to the data
data -> y

sGARCH <- ugarchfit(spec = spec,
                     data = y,
                    solver = 'hybrid')
```

```{r include = FALSE, echo = FALSE}
sGARCH
```

#### Information Criteria for sGARCH

```{R echo = FALSE}
# Results information criteria
infocriteria(sGARCH)
```

#### Specify eGarch model

```{r echo = TRUE}
# Specify eGARCH model
spec <- ugarchspec(
    variance.model =
      list(model = "eGARCH",
           garchOrder = c(1,1)),
      mean.model =
      list(armaOrder = c(0,0),
      include.mean = TRUE),
    distribution.model = "ged"
)

```

```{r include = FALSE, echo = FALSE}
# Fit to the data
data -> y

eGARCH <- ugarchfit(spec = spec,
                     data = y,
                    solver = 'hybrid')
```

#### Information Criteria for eGARCH

```{r echo = FALSE}
infocriteria(eGARCH)
```

#### SGARCH and EGARCH comparison

These two models have similar information criteria, so we can say that it's somehow close to the comparison result in the paper since it has similar error metrics and performance metrics.

```{r include = FALSE}
# Standardized residuals
plot(sGARCH, which = 10)
```

```{r include = FALSE}
# Standardaied Squared residuals
plot(sGARCH, which = 11)
```

### Forecast for fitted model

#### Forecast using ugarchforecast()

```{r echo = FALSE}
forec <- ugarchforecast(sGARCH, data, n.ahead = 5)
forec
```

It's convenient to use ugarchforecast() for forecast future returns, but it will have look-ahead bias, which it use the information that is not yet available or known. So we use...

#### Rolling forecast using ugarchroll()

We defined our window size in the rolling forecast, and according to the paper, there are three different window size, which are 1000, 500, 1500. We changed the window size in ugarchroll() function and hold all other things the same to do comparison.

##### Rolling Forecast for window size 1000

```{r echo = TRUE}
# Example code with window size 1000
roll <- ugarchroll(spec = spec, 
                   data = data,
                   n.ahead = 1,
                   n.start = 3000,
                   refit.every = 50,
                   refit.window = "moving",
                   solver = "hybrid",
                   window.size = 1000,
                   keep.coef = TRUE)

show(roll)
```

```{r echo = FALSE}
roll2 <- ugarchroll(spec = spec, 
                   data = data,
                   n.ahead = 1,
                   n.start = 3000,
                   refit.every = 50,
                   refit.window = "moving",
                   solver = "hybrid",
                   window.size = 500,
                   keep.coef = TRUE)
```

```{r echo = FALSE}
roll3 <- ugarchroll(spec = spec, 
                   data = data,
                   n.ahead = 1,
                   n.start = 3000,
                   refit.every = 50,
                   refit.window = "moving",
                   solver = "hybrid",
                   window.size = 1500,
                   keep.coef = TRUE)
```

```{r include = FALSE}
show(roll)
```

#### Rolling forecast error metrics

##### Error Metircs for 1000 window size

```{r echo = FALSE}
rugarch::report(roll, type = "fpm")
```

##### Error Metrics for 500 window size

```{r echo = FALSE}
rugarch::report(roll2, type = "fpm")
```

##### Error Metrics for window size 1500

```{r echo = FALSE}
rugarch::report(roll3, type = "fpm")
```

Compared these the error metrics for these three models with different window size, w = 1000 and w = 1500 have the similar MSE, but w = 1000 has lower MAE, and w = 1000 and w = 500 has similar MAE but w = 1000 has lower MSE. It's obviously that hybrid Arima-SGARCH model with w = 1000 is the best model among these three models. Also, hybrid Arima(p,1,q)-SGARCH(1,1) with w=1000 will be the best model for predicting S&P 50o log return volatility since it has best performance.

# 5. Conclusions

# References

\[1\] IBM Cloud Education, "Recurrent Neural Network." IBM. September 14, 2020. [https://www.ibm.com/cloud/learn/recurrent-neural-networks#toc-types-of-r-q1VkG6gmhttps://www.ibm.com/cloud/learn/recurrent-neural-networks#toc-types-of-r-q1VkG6gm](https://www.ibm.com/cloud/learn/recurrent-neural-networks#toc-types-of-r-q1VkG6gmhttps://www.ibm.com/cloud/learn/recurrent-neural-networks#toc-types-of-r-q1VkG6gm){.uri}

\[2\] Hochreiter, Sepp and Schmidhuber, Jürgen, "Long Short-Term Memory." Neural Computation. 1997. <http://dx.doi.org/10.1162/neco.1997.9.8.1735>

\[3\] Jahan, Israt, "Stock Price Prediction Using Recurrent Neural Networks." North Dakota State University. June, 2018. <https://hdl.handle.net/10365/28797>

\[4\] Saxena, Shipra, "Introduction to Long Short Term Memory(LSTM)." Analytics Vidhya. March 16, 2022. <https://www.analyticsvidhya.com/blog/2021/03/introduction-to-long-short-term-memory-lstm/>

\[5\] Olah, Christopher, "Understanding LSTM Networks." colah's blog. August 27, 2015. <https://colah.github.io/posts/2015-08-Understanding-LSTMs/>
