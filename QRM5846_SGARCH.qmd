---
title: "QRM_SGARCH"
format: html
editor: visual
---

```{r message=FALSE}
#Load packages
library(tidyquant)
library(fpp3)
library(rugarch)
library(quantmod)
library(lattice)
library(timeSeries)

```

## Data Import

```{r}
# Import Data
sp_prices <- tq_get("^GSPC",
                 get = "stock.prices",
                 from = "2000-01-01",
                 to = "2021-12-31")
```

## Compute log return

```{r}
#Compute the log returns
returns <- sp_prices |>
  arrange(date) |>
  mutate(ret = log(adjusted) - log(dplyr::lag(adjusted)), 
         price = adjusted) |>
  select(date, price, ret)|>
  drop_na(ret)

data <- returns
```

## Specify SGARCH model

```{r}
# Specify sGARCH model
spec <- ugarchspec(
    variance.model =
      list(model = "sGARCH",
           garchOrder = c(1,1)),
      mean.model =
      list(armaOrder = c(0,0),
      include.mean = FALSE),
    distribution.model = "std"
)
```

## Fit model

```{r}
# Fit to the data
data %>%
  pull(ret) -> y

sGARCH <- ugarchfit(spec = spec,
                     data = y,
                    solver = 'hybrid')
coef(sGARCH)
```

## Student-t histogram

```{r}
plot(sGARCH, which = 8)
```

## Q-Q plot

```{r}
plot(sGARCH, which = 9)
```

## Residual Diagnostic

```{r}
# Standardized residuals
plot(sGARCH, which = 10)

# Standardaied Squared residuals
plot(sGARCH, which = 11)
```

## Extract residual and convert to tissble

```{r}
res_g <- sGARCH@fit$z


tibble(data$date,res_g) %>%
mutate(date =`data$date`) %>%
mutate(z = res_g)-> res_g_tb

res_g_tb %>%
as_tsibble(index = date) %>%
select(z) -> res_ts

res_ts <- res_ts %>%
mutate(trading_day = row_number()) %>%
update_tsibble(index = trading_day,
regular = TRUE)
```

## Error Metric

```{r}
sgarch.fcst <- ugarchforecast(sGARCH, n.roll = 4,  n.ahead=1, out.sample = 5)
fcst.list <- list(sgarch.fcst)
fpm.mat <- sapply(fcst.list, fpm)
fpm.mat
```

```{r}
win_length <- 1000
fore_length <- length(data$ret) - win_length
```

```{r}
for (d in 0:fore_length) {
    # Obtain the S&P500 rolling window for this day
    spReturnsOffset = data$ret[(1+d):(win_length+d)]

    # Fit the ARIMA model
    final.aic <- Inf
    final.order <- c(0,0,0)
    for (p in 0:5) for (q in 0:5) {
        if ( p == 0 && q == 0) {
            next
        }

        arimaFit = tryCatch( arima(spReturnsOffset, order=c(p, 0, q)),
                             error=function( err ) FALSE,
                             warning=function( err ) FALSE )

        if( !is.logical( arimaFit ) ) {
            current.aic <- AIC(arimaFit)
            if (current.aic < final.aic) {
                final.aic <- current.aic
                final.order <- c(p, 0, q)
                final.arima <- arima(spReturnsOffset, order=final.order)
            }
        } else {
            next
        }
    }
    print(d)
}
```

```{r}
    # Specify and fit the GARCH model
    spec <- ugarchspec(
        variance.model=list(model = "sGARCH",
                            garchOrder=c(1,1)),
        mean.model=list(armaOrder=c(final.order[1], final.order[3]), 
                        include.mean=T),
        distribution.model="sged"
    )
    
    fit <- tryCatch(
      ugarchfit(
        spec, spReturnsOffset, solver = 'hybrid'
      ), error=function(e) e, warning=function(w) w
    )
    
```
